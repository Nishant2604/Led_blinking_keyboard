
Led_blinking_keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000f4  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000379  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e5  00000000  00000000  00000cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d1  00000000  00000000  00000d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001070  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ef  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  000011b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  8a:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:

void usart_init()
{

	//Set Baud rate
	UBRRL = ubrr_value;
  92:	87 e6       	ldi	r24, 0x67	; 103
  94:	89 b9       	out	0x09, r24	; 9
	UBRRH = (ubrr_value>>8);
  96:	10 bc       	out	0x20, r1	; 32


	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  98:	86 e8       	ldi	r24, 0x86	; 134
  9a:	80 bd       	out	0x20, r24	; 32
	

	//Enable The receiver and transmitter

	UCSRB=(1<<RXEN)|(1<<TXEN);
  9c:	88 e1       	ldi	r24, 0x18	; 24
  9e:	8a b9       	out	0x0a, r24	; 10

}
  a0:	08 95       	ret

000000a2 <usart_send>:
////////////////////////////////////////////////
void usart_send(unsigned char data)
{
	//Wait until the transmitter is ready

	while(!(UCSRA & (1<<UDRE)))
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <usart_send>
		//Do nothing
	}

	//Now write the data to USART buffer

	UDR=data;
  a6:	8c b9       	out	0x0c, r24	; 12
}
  a8:	08 95       	ret

000000aa <usart_rec>:
////////////////////////////////////////////////
unsigned char usart_rec()
{
	//Wait until a data is available

	while(!(UCSRA & (1<<RXC)))
  aa:	5f 9b       	sbis	0x0b, 7	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <usart_rec>
	}

	//Now USART has got data from host
	//and is available is buffer

	return UDR;
  ae:	8c b1       	in	r24, 0x0c	; 12
  b0:	08 95       	ret

000000b2 <main>:


int main()
{
	unsigned char i=0;
	DDRB = 0XFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	87 bb       	out	0x17, r24	; 23


	//lcd_init();
	usart_init();
  b6:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>

		i=usart_rec();

		if( (i=='f') || (i=='F') )
		{
			PORTB=0b00000011;
  ba:	03 e0       	ldi	r16, 0x03	; 3
		}
		if( (i=='b') || (i=='B') )
		{
			PORTB=0b00001100;
  bc:	1c e0       	ldi	r17, 0x0C	; 12
		}
		if( (i=='l') || (i=='L') )
		{
			PORTB=0b00110000;
  be:	d0 e3       	ldi	r29, 0x30	; 48
		}
		if( (i=='r') || (i=='R') )
		{
			PORTB=0b11000000;
  c0:	c0 ec       	ldi	r28, 0xC0	; 192

	
	while(1)
	{

		i=usart_rec();
  c2:	0e 94 55 00 	call	0xaa	; 0xaa <usart_rec>

		if( (i=='f') || (i=='F') )
  c6:	86 36       	cpi	r24, 0x66	; 102
  c8:	11 f0       	breq	.+4      	; 0xce <main+0x1c>
  ca:	86 34       	cpi	r24, 0x46	; 70
  cc:	09 f4       	brne	.+2      	; 0xd0 <main+0x1e>
		{
			PORTB=0b00000011;
  ce:	08 bb       	out	0x18, r16	; 24
		}
		if( (i=='b') || (i=='B') )
  d0:	82 36       	cpi	r24, 0x62	; 98
  d2:	11 f0       	breq	.+4      	; 0xd8 <main+0x26>
  d4:	82 34       	cpi	r24, 0x42	; 66
  d6:	09 f4       	brne	.+2      	; 0xda <main+0x28>
		{
			PORTB=0b00001100;
  d8:	18 bb       	out	0x18, r17	; 24
		}
		if( (i=='l') || (i=='L') )
  da:	8c 36       	cpi	r24, 0x6C	; 108
  dc:	11 f0       	breq	.+4      	; 0xe2 <main+0x30>
  de:	8c 34       	cpi	r24, 0x4C	; 76
  e0:	09 f4       	brne	.+2      	; 0xe4 <main+0x32>
		{
			PORTB=0b00110000;
  e2:	d8 bb       	out	0x18, r29	; 24
		}
		if( (i=='r') || (i=='R') )
  e4:	82 37       	cpi	r24, 0x72	; 114
  e6:	11 f0       	breq	.+4      	; 0xec <main+0x3a>
  e8:	82 35       	cpi	r24, 0x52	; 82
  ea:	59 f7       	brne	.-42     	; 0xc2 <main+0x10>
		{
			PORTB=0b11000000;
  ec:	c8 bb       	out	0x18, r28	; 24
  ee:	e9 cf       	rjmp	.-46     	; 0xc2 <main+0x10>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
